input {
    file {        path => "/tmp/*nodes*.csv"       
                  start_position => beginning
                  sincedb_path => "/dev/null"
                  ignore_older => 0
         }
}

filter {

 # sleep {
 #   time => "5"   # Sleep 1 second
 #   every => 10   # on every 10th event
 # }

 if ["labels(n)"]  
	    {
        drop {}
        } 

  csv {
      separator => "," 
      skip_empty_columns => true
      columns => [
                 "nodeCategory",
                 "nodeValidUntil",
                 "nodeCountryCode",
                 "nodeCountries",
                 "nodeId",
                 "nodeSource",
                 "nodeAddress",
                 "nodeName",
                 "nodeJurisdictionDescription",
                 "nodeServiceProvider",
                 "nodeJurisdiction",
                 "nodeClosedDate",
                 "nodeIncorporationDate",
                 "node.ibcRUC",
                 "nodeType",
                 "nodeStatus",
                 "nodeCompanyType",
                 "nodeNote"
                  ]
  }
mutate {
      remove_field => ["message","@timestamp", "path", "@version","host"]
}

  mutate {
    gsub => [
      # replace all forward slashes with underscore
      "nodeCategory", "\"", "",
      "nodeCategory", "\]", "",
      "nodeCategory", "\[", ""
    ]
  }



  mutate {
     split => { "nodeCountryCode" => ";" }
     split => { "nodeCountries" => ";" } 
  }


if [nodeAddress] {  
  rest {
    request => {
      url => "http://name-address-python-api:8080/v1/addressParser/"    
      method => "post"                  
      params => {                       
        "addressText" => "%{nodeAddress}"
      }
    }
    json => true                        
    target => "nodeAddressParsed"            
  }
}


if [nodeCountryCode] {  
    elasticsearch {
      index => "country"
      hosts => ["http://swarmee.net:9200"]
      enable_sort => false
      query => "alpha3Code:%{[nodeCountryCode]}"
      fields => {"region" => "nodeCountryRegion"
                 "subregion" => "nodeCountrySubRegion"
                 "location" => "location"
                 }
      }
}

  mutate {
     convert => { "location.lat" => "float" }
     convert => { "location.lon" => "float" }
  }
      
###  URL encoding the spaces in the names away
##  mutate {
##    copy => { "nodeName" => "nodeNameEncoded" }
##  }
##
##  mutate {
##    gsub => [
##      "nodeNameEncoded", " " , "%20"
##    ]
##  }


if [nodeName] {
  rest {
    request => {
      url => "http://name-address-python-api:8080/v1/partyType/nameParser"
    method => "post"                  
      params => {                       
        "partyName" => "%{nodeName}"
      }
    json => true
    target => "nodeNameParsed"
  }
}





#  kv {
#    allow_duplicate_values => true
#    source => "%{[nodeAddressParsed][0]}"
#    target => "nodeAddresskv"
#   recursive => "true"
#   field_split => ","
#   value_split => ":"
#  include_brackets => false
#   remove_char_key => "\[\]"
#  }

}

output {
    stdout {codec => rubydebug}
if [nodeName] {
    elasticsearch {
        index => "icij-nodes"
##      hosts => ["http://elasticsearch1"]
        hosts => ["http://swarmee.net:9200"]
      doc_as_upsert => true
      retry_on_conflict => 3
     action => "create"
      document_type => "icij-nodes" 
      document_id =>    "%{[nodeId]}"
      #ssl_certificate_verification => false      
    pipeline => "opennlp-pipeline"
    template      => "/tmp/template.json"
    template_name => "icij-nodes"
    template_overwrite => true
      }
    }
else
{
    elasticsearch {
        index => "icij-nodes"
##      hosts => ["http://elasticsearch1"]
        hosts => ["http://swarmee.net:9200"]
      doc_as_upsert => true
      retry_on_conflict => 3
     action => "create"
      document_type => "icij-nodes"
      document_id =>    "%{[nodeId]}"
      #ssl_certificate_verification => false
    template      => "/tmp/template.json"
    template_name => "icij-nodes"
    template_overwrite => true

}}
}
